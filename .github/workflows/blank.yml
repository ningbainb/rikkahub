# 文件名: .github/workflows/

name: Android CI Build

on:
  push:
    branches: [ main, master, develop ] # 根据您的分支策略调整
  pull_request:
    branches: [ main, master, develop ] # 根据您的分支策略调整
  workflow_dispatch: # 允许手动触发工作流

jobs:
  build:
    name: Build Android App
    runs-on: ubuntu-latest # 使用最新的Ubuntu运行器

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # 使用最新的checkout action

    - name: Validate Gradle Wrapper
      # 确保 Gradle Wrapper 未被篡改，增强安全性
      uses: gradle/actions/wrapper-validation@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v4 # 使用最新的setup-java action
      with:
        java-version: '17'
        distribution: 'temurin' # Eclipse Temurin 是一个推荐的OpenJDK发行版
        cache: 'gradle' # 缓存Gradle依赖，加快后续构建速度

    - name: Create dummy google-services.json for CI
      # Google Services插件需要此文件。为CI环境创建虚拟文件。
      # **重要**: 确保下面的包名 'me.rerere.rikkahub' 与您项目的 applicationId 一致。
      run: |
        echo "确保应用模块目录存在 (默认为 'app')..."
        mkdir -p app # 如果您的应用模块目录不是 'app'，请修改这里
        echo "正在创建虚拟 google-services.json..."
        echo '{
          "project_info": {
            "project_number": "123456789012",
            "firebase_url": "https://dummy-project.firebaseio.com",
            "project_id": "dummy-project-id",
            "storage_bucket": "dummy-project-id.appspot.com"
          },
          "client": [
            {
              "client_info": {
                "mobilesdk_app_id": "1:123456789012:android:me.rerere.rikkahub", # 确认包名
                "android_client_info": {
                  "package_name": "me.rerere.rikkahub" # 确认包名
                }
              },
              "oauth_client": [],
              "api_key": [ { "current_key": "dummy_api_key_for_ci" } ],
              "services": { "appinvite_service": { "other_platform_oauth_client": [] } }
            }
          ],
          "configuration_version": "1"
        }' > app/google-services.json # 确认文件路径
        echo "虚拟 google-services.json 创建完成。"
      # 如果您的应用模块不是 'app'，请将上面两处的 'app' 修改为正确的模块名。

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Clean project (Optional)
      # 清理项目可以避免旧缓存导致的问题，但会增加构建时间
      run: ./gradlew clean
      # 如果不需要可以注释掉上面这行

    - name: Build Debug APK
      # **重要**: 确认 ':app:assembleDebug' 是正确的构建任务。
      # 如果主应用模块不是 'app'，请修改为 ':your-app-module:assembleDebug'。
      run: ./gradlew :app:assembleDebug --stacktrace

    - name: List APKs in output directory (for debugging)
      # 如果APK上传失败，此步骤有助于确认APK的实际路径和名称。
      run: |
        echo "在 app/build/outputs/apk/debug/ 中查找 APKs..."
        # **重要**: 如果您的模块名不是 'app'，请修改下面的路径
        ls -R app/build/outputs/apk/debug/ || echo "未找到 'app' 模块的 Debug APK 目录或目录为空。"
        echo "-----------------------------------------------------"
        echo "在整个工作区中查找 APKs:"
        find . -name "*.apk" -ls

    - name: Upload Debug APK Artifact
      uses: actions/upload-artifact@v4 # 使用最新的upload-artifact action
      with:
        name: app-debug-apk # 上传的构建产物的名称
        # **重要**: 确认此路径与APK的实际输出路径匹配。
        # 对于 'app' 模块，通常是 'app/build/outputs/apk/debug/*.apk'。
        # 如果模块名不同，请修改路径，例如 'your-app-module/build/outputs/apk/debug/*.apk'。
        path: app/build/outputs/apk/debug/*.apk
        if-no-files-found: error # 如果找不到文件，则构建失败
        retention-days: 7 # 构建产物保留天数（可选）
